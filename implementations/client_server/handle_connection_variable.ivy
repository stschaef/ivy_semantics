#lang ivy1.7

type client
individual negative_one : client

type server
type command = {connect,disconnect,other}

relation pending_message(X:client,Y:server,Z:command)

function semaphore(S : server) : bool
function connected(S : server) : client

after init {
    semaphore(S) := true;
    connected(S) := negative_one;
}

action handle_connection (clientid : client, receiver : server, com : command) = {
    require pending_message(clientid, receiver, com);
    if (com = connect) {
       if (semaphore(receiver) = true) {
          semaphore(receiver) := false;
          connected(receiver) := clientid;
       }
    }
    if (com = disconnect) {
       if (connected(receiver) = clientid) {
           connected(receiver) := negative_one;
           semaphore(receiver) := true;
        }
    }
    pending_message(clientid, receiver, com) := false;
}

action send_message (clientid : client, receiver : server, com : command) = {
    pending_message(clientid, receiver, com) := true;
}

export handle_connection


invariant [safety] forall C1 : client . forall C2 : client . forall S : server . (connected(S) = C1 & connected(S) = C2) -> (C1 = C2)
